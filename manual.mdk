[INCLUDE=bootstrap]
Title      : SEViz - a tool for visualizing symbolic execution
Css        : nav-example.css
~Col       : .col-lg-4

~ Begin Container
~ Masthead

### SEViz -- a tool for visualizing symbolic execution {.text-muted}

* [Home](index.html)
* {.active} [User manual](#)
* [Downloads](downloads.html)
* [Source](source.html)
* [Contact](contact.html)
{.nav .nav-justified}
~ 

~ Begin Row
## User manual

### Requirements

* .NET version 4.0 or later. [Download &raquo;](http://www.microsoft.com/en-us/download/details.aspx?id=30653)
* Visual Studio 2015 Ultimate Preview or later, with Smart Unit Tests (formerly known as Pex) included. [Download &raquo;](http://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx) 
* GraphViz version 2.38 or later. [Download &raquo;](http://www.graphviz.org/Download..php)

### Installation

1) Install the required software.
2) Add the GraphViz directory to the PATH variable (if its not present). SEViz will call an exe file from there.
3) Unpack the [downloaded binaries](downloads.html) into a selected directory. You will find three folders included.
4) "Viewer" folder contains the SEViz viewer component, it'll run from here.
5) "Vsextension" folder contains the Visual Studio extension to be installed.
6) Start the SEViz.VSExtension.vsix extension installer file. Select Visual Studio 2015 as the target of the installation.
7) The last step is **project related**. When you use SEViz, you'll have to include SEViz.Monitoring.dll and Ionic.Zip.dll files from the SEViz.Monitoring folder in your **test project** (generated by Pex/Smart Unit Tests) references along with the followings. These files can be found in `%VSINSTALLDIR%\Common7\IDE\Extensions\Microsoft\Pex\`.
  * Microsoft.ExtendedReflection.dll
  * Microsoft.ExtendedReflection.Reasoning.dll
  * Microsoft.ExtendedReflection.Z3Solver.dll
  * Microsoft.Pex.exe
  * Microsoft.Pex.Framework.dll
  * Microsoft.Z3.dll
8) SEViz is now ready to be used.

### Tutorial

We created a simple example solution to demonstrate the workflow of our tool. So, firstly you have to download this example below.

[Download the example solution &raquo;](seviz.examples.zip){.btn .btn-primary html-role=button}

#### 1. Opening the solution

In the first step, you have to unpack the downloaded zip file, which contains two folders. We will use the second one in this tutorial.

* SEViz.Examples.SimpleMethods
* **SEViz.Examples.Tutorials**

Firstly, open the solution in Visual Studio. We have already created the test project with Pex, and included the required dlls in the project, thus you can skip this step (installation step 7.). 

The project contains an `A` class with `Foo` and `Bar` methods. We are testing the first method in this tutorial.

However, if you are using the tool **in a new project**, you have to run Smart Unit Tests first on the selected unit under test (which can be a method or class) in order to generate a test project.
This can be done by right clicking on the specific element, then selecting Smart Unit Tests. The user manual of the tool can be [found here](https://msdn.microsoft.com/en-us/library/dn823749.aspx).
Now, you can include the required references into the test project described in installation step 7.

#### 2. Attributing the parameterized test

Our tool is working with .NET attributes, which can be added to parameterized test methods. To make SEViz able to monitor the execution, you have to define the following attributes.

`PexGraphBuilderPackage(outFileUrl,includeList,excludeList)
 PexGraphBuilderPackageHelper(outFileUrl)`


* _OutFileUrl:_ The specific name of the file, which will contain all output. This file will get the .sviz extension when the monitoring has finished. The two attributes must have the same outFileUrl value.
* _IncludeList:_ The artifacts in the code (separated with ';'), which should be included in the unit under test, which helps SEviz marking the quits from the unit.
* _ExcludeList:_ The artifacts in the code (separated with ';'), which should not be included in the unit under test.

In the example project, you'll see these parameters in action defined as follows.

    private const string OUTPUT_DIR = @"d:\SEVizOutput\VS2015\Example\";
    [TestMethod]
    [PexMethod]
    [PexGraphBuilderPackage(OUTPUT_DIR + "Foo", "SEViz.Examples.Tutorial.A.Foo", "")]
    [PexGraphBuilderPackageHelper(OUTPUT_DIR + "Foo")]
    public void FooTest([PexAssumeUnderTest]A target, bool a, int b)
    {
        target.Foo(a, b);
    }

You can see that the unit under test is currently defined as the `Foo` method in class `A`. By default, namespaces starting with `Microsoft` or `System` are in the excluded list.

#### 3. Running Smart Unit Tests

Now, everything is set for monitoring, so you have to start the test generation process. This is done by right clicking on the method, from which you want to start the symbolic execution of Smart Unit Tests.
Then, in the context menu, select Smart Unit Tests. The tool automatically recognizes the attributed parameterized unit test in the generated test project, thus the monitoring will also automatically start.

It is important to wait until the generation process ends, and SEViz calls GraphViz in a new command line window. Otherwise, the monitoring process won't collect and summarize all of the data.
{.text-danger}

#### 4. Visualizing the execution

Start the SEViz Viewer using the Seviz.Viewer.exe file. A window will open.
Now, click on the 'Open a SEViz file' button and locate the previously saved output file. You'll see the following.

~ Center
![seviz_loaded]

[seviz_loaded]: images/seviz_loaded.png "SEViz Viewer with the loaded example" { width=auto max-width=80% }
~

 * On the left hand side, there is a tab control, in which you can view the runs of the monitored executions. Double clicking on one of them will highlight the nodes on the corresponding path.
 * If you double click on a node, which is not a leaf, then the tab control on the left will extend with a details tab, which contains all the data of the node.
 * Hovering a node will pop out a bubble, which contains the incremental path condition, its method, the source code mapping and the reason of its exhaust.
 * Double clicking on a leaf node will select the path of the run on which the execution reached that node.
 * On the details tab, you can open the data in a new window in order to compare nodes to each other.

#### 5. Mapping the graph to source code
Start a Visual Studio 2015 instance (if not running) with the SEViz VSExtension installed. Then, find out the process ID (PID) of this VS instance (e.g. from Task Manager). After this, open the tutorial solution.

Go back to SEViz Viewer, then click 'Connect to Visual Studio'. A window is going to pop up, in which you have to type in the PID of the VS instance, then click OK.
If no error appears, then the button will transform into a disconnect button, which also shows the PID of the connected instance.

The only thing to do is selecting nodes in SEViz Viewer and clicking on the 'Map to code' button. After this, a bookmark will appear on each line in the Visual Studio instance, which are corresponding to the selected nodes.
Vica versa, click in the desired line of code in Visual Studio, then click on 'Tools' and select 'Show in SEViz Viewer'. The corresponding nodes will be selected in SEViz Viewer with pink color.
~ End Row

~ Footer
&copy; BME MIT Fault Tolerant Systems Research Group, 2015
~

~ End Container
